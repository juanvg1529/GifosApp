{"version":3,"sources":["Context/AppContext.jsx","Darkmode/DarkmodeHook.js","Components/Header/Header.jsx","Components/Autocomplete/Autocomplete.jsx","Components/Search/Search.jsx","utils/utils.js","Components/CardGifo/CardGifo.jsx","Components/Results/Results.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","isDarkMode","setIsDarkMode","stateButton","setStateButton","gifoState","setGifoState","searchState","setSearchState","textInfo","setTextInfo","gifSugestion","setGifsugestion","Provider","value","children","DarkModeHook","classCostumeName","useContext","Header","className","src","alt","onClick","e","Autocomplete","sugestion","Search","useEffect","length","a","fetch","apiSugestion","json","dataSugest","data","apiSugestRender","searchButtonFunction","gifosSugestionsRender","map","sugest","name","analytics_response_payload","type","id","placeholder","onChange","target","onKeyDown","keyCode","autoComplete","onBlur","setTimeout","CardGifo","href","urlGiphy","url","Results","request","dataGif","apiGiphyrRequest","gifosRender","gifos","images","downsized","slug","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40025831.chunk.js","sourcesContent":["import { createContext, useState } from \"react\";\r\n\r\nexport const AppContext=createContext();\r\n\r\n\r\nexport function AppProvider(props){\r\n   \r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n    const[stateButton,setStateButton]=useState(false);\r\n    const[gifoState,setGifoState]=useState([]);\r\n    const [searchState,setSearchState]=useState(\"\");\r\n    const [textInfo,setTextInfo]=useState(\"Do some gif search!\");\r\n    const [gifSugestion,setGifsugestion]=useState([]);\r\n   \r\n\r\n return(\r\n     \r\n     <AppContext.Provider value={{isDarkMode,setIsDarkMode,stateButton,setStateButton,gifoState,setGifoState,searchState,setSearchState,textInfo,setTextInfo,gifSugestion,setGifsugestion}}>\r\n        {props.children}\r\n    </AppContext.Provider>\r\n         )   \r\n}","import { useContext } from \"react\";\r\nimport { AppContext } from \"../Context/AppContext\";\r\n\r\n/*This custom hook provides the dark mode to all the App components */\r\nexport const DarkModeHook=(classCostumeName)=>{\r\n    const {isDarkMode}=useContext(AppContext);\r\n    return (`${classCostumeName} ${isDarkMode? \"dark\":\"ligth\"}`)\r\n}","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../Context/AppContext\";\r\nimport \"./StylesHeader/Header.css\";\r\nimport \"./StylesHeader/DarkHeader.css\";\r\nimport { DarkModeHook } from \"../../Darkmode/DarkmodeHook\";\r\n\r\nexport function Header() {\r\n  const { isDarkMode, setIsDarkMode } = useContext(AppContext);\r\n\r\n  const setTheme = (e) => {\r\n    //handler of the darkmode\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  return (\r\n    <header className={DarkModeHook(\"Header\")}>\r\n      <section className=\"Header-Title\">\r\n        <img src=\"https://i.imgur.com/eaDMM8T.png\" alt=\"logo\"></img>\r\n        <span className={DarkModeHook(\"Gifos-logo-name\")}> GIFOS</span>\r\n      </section>\r\n      <button onClick={setTheme} className={DarkModeHook(\"Header-Button\")}>\r\n       {isDarkMode ? \"LIGHT\" : \"DARK\"}  MODE\r\n        {/*This conditional renders the darkmode\r\n         */}\r\n      </button>\r\n    </header>\r\n  );\r\n}\r\nexport default Header;\r\n","import { useContext } from \"react\"\r\nimport { AppContext } from \"../../Context/AppContext\"\r\nimport { DarkModeHook } from \"../../Darkmode/DarkmodeHook\"\r\nimport \"./AutoComplete styless/AutoComplete.css\"\r\n\r\nexport const Autocomplete=({sugestion})=>{\r\n\r\n    const {stateButton,setStateButton,setSearchState}=useContext(AppContext);\r\n\r\n   const onClickACHandler=()=>{//Event handler for the autocomplete selection\r\n        setStateButton(!stateButton)\r\n        setSearchState(sugestion)\r\n    }\r\n  \r\n\r\n    return(\r\n    <div className={DarkModeHook(\"AutoComplete-Component\")} onClick={onClickACHandler} >\r\n        <p className={DarkModeHook('AutoComplete-P')}>{sugestion}</p>\r\n\r\n    </div>\r\n\r\n    )\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport \"./SearchStyles/Search.css\";\r\nimport \"./SearchStyles/DarkSearch.css\";\r\nimport { AppContext } from \"../../Context/AppContext\";\r\nimport { DarkModeHook } from \"../../Darkmode/DarkmodeHook\";\r\nimport { apiSugest } from \"../../utils/utils\";\r\nimport { Autocomplete } from \"../Autocomplete/Autocomplete\";\r\n\r\nexport function Search() {\r\n  const {\r\n    stateButton,\r\n    setStateButton,\r\n    searchState,\r\n    setSearchState,\r\n    gifSugestion,\r\n    setGifsugestion,\r\n  } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    //Here the app request the data from the API to render the sugestions\r\n    if (searchState.length > 0) {\r\n      async function apiSugestRender() {\r\n        const apiSugestion = await apiSugest(searchState);\r\n        const dataSugest = await apiSugestion.json();\r\n        setGifsugestion(dataSugest.data);\r\n\r\n      }\r\n      apiSugestRender();\r\n    }\r\n  }, [searchState]);\r\n\r\n  //buton function to implement the search\r\n  const searchButtonFunction = () => {\r\n    setStateButton(!stateButton);\r\n  };\r\n  const onChangeSearch = (e) => setSearchState(e.target.value); //this handler gets the input data\r\n\r\n  //event handler to press the key enter\r\n  const searchKeyPress = (e) => {\r\n    if (e.keyCode === 13) {\r\n      setStateButton(!stateButton);\r\n    }\r\n  };\r\n  const onblurHandler = () => {\r\n    //This function erease after 300ms the content on the input\r\n    setTimeout(() => {\r\n      setSearchState([]);\r\n    }, 300);\r\n  };\r\n\r\n  const gifosSugestionsRender = gifSugestion.map((sugest) => {\r\n    //Here the autocomplete its being render\r\n    if (gifSugestion.length > 0 && stateButton) {\r\n      setGifsugestion([]);\r\n    }\r\n    return (\r\n      <div key={sugest.analytics_response_payload}>\r\n        <Autocomplete\r\n          sugestion={sugest.name}\r\n          \r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={DarkModeHook(\"Search-component\")}>\r\n      <section className={DarkModeHook(\"Title-Search\")}>\r\n        <h2>\r\n          {\" \"}\r\n          {\"Inspire yourself & search for the best\"} <b>GIFS </b>!\r\n        </h2>\r\n      </section>\r\n      <section>\r\n        <img\r\n          className=\"SearchIMG\"\r\n          src=\"https://i.imgur.com/DuCVsVp.png\"\r\n          alt=\"headerIMG\"\r\n          \r\n        />\r\n      </section>\r\n      <section className={\"form\"}>\r\n        <input\r\n          className={DarkModeHook(\"SearchBAR\")}\r\n          type=\"search\"\r\n          id=\"gsearch\"\r\n          name=\"gsearch\"\r\n          value={searchState}\r\n          placeholder=\"Gifs Search\"\r\n          onChange={onChangeSearch}\r\n          onClick={searchButtonFunction}\r\n          onKeyDown={searchKeyPress}\r\n          autoComplete=\"off\"\r\n          onBlur={onblurHandler}\r\n        ></input>\r\n\r\n        <button\r\n          onClick={searchButtonFunction}\r\n          className={DarkModeHook(\"Search-button\")}\r\n        >\r\n          <img src=\"../../utils/Vector.png\" alt=\"lupa\"></img>\r\n        </button>\r\n      </section>\r\n      <section>{gifosSugestionsRender}</section>\r\n      <section>\r\n        <p className={DarkModeHook(\"Search-Results\")}>Search Results</p>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","\r\nexport const apiRequest=(link)=>{\r\n    return fetch(`https://api.giphy.com/v1/gifs/search?api_key=OBBzzXm9g5kiOcuF9MgaX4zTuCHy1t7j&q=${link}&limit=12&offset=0&rating=g&lang=en`);\r\n} \r\n\r\nexport const apiSugest=(link)=>{\r\n    return fetch(`https://api.giphy.com/v1/gifs/search/tags?api_key=OBBzzXm9g5kiOcuF9MgaX4zTuCHy1t7j&q=${link}&limit=5&offset=0&rating=g`);\r\n}\r\n//return fetch(`https://api.giphy.com/v1/gifs/search?/tags?api_key=OBBzzXm9g5kiOcuF9MgaX4zTuCHy1t7j&q=${link}&limit=12&offset=0&rating=g&lang=en`);","import \"./GifoStyles/GifoStyles.css\";\r\nexport const CardGifo = (props) => {//this component renders the gifs from the API\r\n  return (\r\n    <div className=\"CardGifo\">\r\n      <a href={props.urlGiphy} target=\"blank\">\r\n        <img className=\"GifCardImg\" src={props.url} alt={props.id} />\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n","import { AppContext } from \"../../Context/AppContext\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport \"./ResultsStyles/Results.css\";\r\nimport { apiRequest } from \"../../utils/utils\";\r\nimport { CardGifo } from \"../CardGifo/CardGifo\";\r\nimport { DarkModeHook } from \"../../Darkmode/DarkmodeHook\";\r\n\r\nfunction Results() {\r\n  const {\r\n    stateButton,\r\n    setStateButton,\r\n    gifoState,\r\n    setGifoState,\r\n    searchState,\r\n    textInfo,\r\n    setTextInfo,\r\n  } = useContext(AppContext);\r\n\r\n  //useEffecto to get the API endpoint\r\n  useEffect(() => {\r\n    if (stateButton) {\r\n      async function apiGiphyrRequest() {\r\n        try {\r\n          setTextInfo(\"Loading...\");\r\n          const request = await apiRequest(searchState);\r\n          const dataGif = await request.json();\r\n          setGifoState(dataGif.data);\r\n          setStateButton(false);\r\n          if (dataGif.data.length === 0) {\r\n            setTextInfo(`Sorry we couldn't find ${searchState} :C`);\r\n          }\r\n          if (dataGif.data.length > 0) {\r\n            setTextInfo(\"Loading\");\r\n          }\r\n        } catch (error) {\r\n          setTextInfo(\"Ups something when wrong, please try again :( \");\r\n        }\r\n      }\r\n      apiGiphyrRequest();\r\n    }\r\n  }); //it gets the endpoint only when the button is press\r\n\r\n  const gifosRender = gifoState.map((gifos) => {\r\n    //Here the gifos are render using the CardGifo Comp\r\n\r\n    return (\r\n      <div key={gifos.id}>\r\n        <CardGifo\r\n          url={gifos.images.downsized.url}\r\n          id={gifos.images.slug}\r\n          urlGiphy={gifos.url}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={DarkModeHook(\"Results-component\")}>\r\n      {/*Here i isded the ternary operator to render the gifo in the app */}\r\n      {gifoState.length > 0 ? (\r\n        gifosRender\r\n      ) : (\r\n        <p className={DarkModeHook(\"Text-info\")}>{textInfo}</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import \"./index.css\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport Search from \"./Components/Search/Search\";\r\n\r\nimport { AppProvider } from \"./Context/AppContext\";\r\nimport Results from \"./Components/Results/Results\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppProvider>\r\n\r\n        <Header />\r\n        <Search />\r\n        <Results/>\r\n      </AppProvider>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}